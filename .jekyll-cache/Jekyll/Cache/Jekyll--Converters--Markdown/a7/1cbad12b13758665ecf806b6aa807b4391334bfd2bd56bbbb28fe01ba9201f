I"z<p>#react</p>

<h3 id="리엑트란">리엑트란</h3>
<p>리엑트는 프레임워크가 아닌 라이브러리. 오로지 뷰만을 담당하므로 나머지 부분은 직접 구현해야함.</p>

<h3 id="virtual-dom">virtual dom</h3>
<p>리엑트는 Virtual DOM을 사용한다 -&gt; 큰 규모의 어플리케이션을 다룰 때, DOM을 최소한으로 조작하기 위해서 DOM의 업데이트를 추상화 한다.</p>

<h6 id="적용과정">적용과정</h6>
<ul>
  <li>데이터가 업데이트 되면 전체 UI를 Virtual DOM에 리랜더링.</li>
  <li>이전 Virtual DOM에 있던 내용과 현재 내용을 비교.</li>
  <li>바뀐 부분을 실제 DOM에 적용.</li>
</ul>

<p>참고 : <a href="https://velog.io/@superlipbalm/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior">(번역) 블로그 답변: React 렌더링 동작에 대한 (거의) 완벽한 가이드</a></p>

<h3 id="setting">setting</h3>
<ul>
  <li>note: 노드 버전 14 이상을 요구. -&gt; <del>생각보다 설치가 매우 오래걸림. 예전에 공부할때도 이랬나?</del>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install -g create-react-app
create-react-app my-app
</code></pre></div>    </div>
  </li>
</ul>

<p>Vue 프로젝트가 먼저 포트 3000을 차지하고 있으므로, <code class="language-plaintext highlighter-rouge">package.json</code>을 만져주었다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  "scripts": {
    "start": "export PORT=3001 &amp;&amp; react-scripts start",
	...
  },
</code></pre></div></div>

<h3 id="jsx">JSX</h3>
<p>리액트에서는 JSX라는 문법을 사용. 해당 코드는 브라우저에서 실행되기 전 바벨에서 임의로 자바스크립트 형태의 코드로 변환함. -&gt; 가독성과 활용도를 높일 수 있음.</p>

<ul>
  <li>note: 문법 자체는 Vue와 비슷하다. 최상위 wrapper가 필요하다는 점과 내부에서 조건문 사용하는 방식도 비슷…
    <ul>
      <li>리엑트 네이티브 공부할 때 스타일에서 카멜 케이스 쓴 거 리액트 문법이었구나.</li>
    </ul>
  </li>
</ul>

<h3 id="컴포넌트">컴포넌트</h3>
<p>리엑트의 컴포넌트에는 <code class="language-plaintext highlighter-rouge">함수형 컴포넌트</code>와 <code class="language-plaintext highlighter-rouge">클래스형 컴포넌트</code>가 있다.</p>

<h6 id="함수형-컴포넌트의-예시">함수형 컴포넌트의 예시</h6>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Welcome</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<h6 id="class형-컴포넌트의-얘시">class형 컴포넌트의 얘시</h6>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Welcome</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span>  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h6 id="whats-the-difference">what’s the difference?</h6>
<p><strong>함수형 컴포넌트</strong></p>
<ul>
  <li>선언 하기가 훨씬 편하다.</li>
  <li>메모리 자원이 비교적 적음. (Remarkable하지는 않음)</li>
  <li>state 기능 및 라이프 사이클 기능을 사용할 수 없음 -&gt; Hooks라는 기능을 통해 일부 해결됨.</li>
</ul>

<p><strong>클래스형 컴포넌트</strong></p>
<ul>
  <li>state 기능 및 라이프 사이클 기능을 사용할 수 있다.</li>
  <li>임의의 메서드를 정의할 수 있다.</li>
  <li>랜더 함수가 반드시 존재해야 하며, 그 안에서 보여주어야 할 JSX를 반환해야 한다.</li>
</ul>

<h6 id="props">props</h6>
<ul>
  <li>컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값.</li>
  <li>
    <p>컴포넌트에서는 해당 props를 읽기 전용으로만 사용할 수 있으며, 바꾸기 위해서는 부모 컴포넌트에서 설정해야 한다.</p>
  </li>
  <li>MyComponent.js
```javascript
const MyCompoennt = (props) =&gt; {
return &lt;div&gt;안녕 나의 {props.name} 컴포넌트&lt;/div&gt;;
}</li>
</ul>

<p>// 하단에 다음과 같이 default를 지정할 수 있음
MyComponent.defaultProps = {
  name: ‘리액트’
}</p>

<p>export default MyCompoennt;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
* App.js
```javascript
import MyCompoennt from './MyComponent';

function App() {
  return &lt;MyCompoennt name="react" /&gt;;
}

export default App;
</code></pre></div></div>

<ul>
  <li>추가 ) 컴포넌트 태그 사이에 있는 내용을 보여주는 props : children</li>
</ul>

<p>-&gt; 보통 비구조화 할당해서 씀. <del>난 왜 이 용어가 어렵지?</del>
 <code class="language-plaintext highlighter-rouge">const MyCompoennt = ({name, children}) =&gt; {</code></p>

<h6 id="propstypes">propsTypes</h6>
<p>필수 props를 지정하거나, 타입을 지정할 때 사용. 코드 상단에 import 해야 함.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">PropsTypes</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">prop-types</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">//...</span>

<span class="nx">MyComponent</span><span class="p">.</span><span class="nx">PropsTypes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="nx">PropsTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span>
<span class="p">}</span>
</code></pre></div></div>

<p>다음 과정을 클래스 컴포넌트를 통해 표현하면 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">,</span> <span class="nx">Component</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PropTypes</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">prop-types</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">MyClassComponent</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>
  <span class="kd">static</span> <span class="nx">defaultProps</span> <span class="o">=</span><span class="p">{</span>
    <span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span>
  <span class="p">};</span>
  <span class="kd">static</span> <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
  <span class="p">};</span>
  <span class="nx">render</span><span class="p">(){</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">favoriteNumber</span><span class="p">,</span> <span class="nx">children</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">안녕</span> <span class="nx">나의</span> <span class="p">{</span><span class="nx">name</span><span class="p">}</span> <span class="nx">컴포넌트</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="se">)</span><span class="err">;
</span>  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyClassComponent</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="state">state</h3>
<ul>
  <li>컴포넌트 내부에서 바뀔 수 있는 값.</li>
  <li>constructor라는 컴포넌트 생성자를 통해 state의 초깃값을 생성하며, <code class="language-plaintext highlighter-rouge">super(props)</code>를 반드시 호출해 주어야 한다.</li>
  <li>render 함수에서 state를 조회할 때는 <code class="language-plaintext highlighter-rouge">this.state</code>를 통해 조회하면 된다.</li>
  <li>state의 값을 변환시키고 싶을 때는 <code class="language-plaintext highlighter-rouge">this.setState</code>를 사용한다 -&gt; 내부에서 참조한 값만을 변화시킨다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Counter.js</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">,</span> <span class="nx">Component</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
<span class="c1">// 컴포넌트 생성자 메서드</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="o">=</span><span class="p">{</span>
      <span class="na">number</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="na">fixedNumber</span><span class="p">:</span><span class="mi">0</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">(){</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">number</span><span class="p">,</span> <span class="nx">fixedNumber</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">number</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">fixedNumber</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">number</span><span class="p">:</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})</span>
        <span class="p">}}</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">ME</span><span class="o">!&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Counter</span><span class="p">;</span>
</code></pre></div></div>

<h6 id="better-way">better way</h6>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">,</span> <span class="nx">Component</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>

  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">number</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span>
    <span class="na">fixedNumber</span><span class="p">:</span><span class="mi">0</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">(){</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">number</span><span class="p">,</span> <span class="nx">fixedNumber</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">number</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">fixedNumber</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">number</span><span class="p">:</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})</span>
        <span class="p">}}</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">ME</span><span class="o">!&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Counter</span><span class="p">;</span>
</code></pre></div></div>

<h6 id="setstate-좀-더-알아보기">setState 좀 더 알아보기</h6>
<ul>
  <li><code class="language-plaintext highlighter-rouge">this.setState</code> 를 통해 값을 업데이트 시킬 때는 상태가 비동기적으로 업데이트 된다. -&gt; onClick 내에 setState를 두 번 호출해도 값은 1번 호출할 때와 동일하게 바뀐다.</li>
  <li>해결 : <strong>객체 대신 인자로</strong> 넣어준다.
    <ul>
      <li>prevState: 지난 상태</li>
      <li>props는 현재 지니고 있는 상태를 나타낸다.
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">prevState</span><span class="p">,</span> <span class="nx">props</span><span class="p">}</span><span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="c1">//...}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p><strong>적용 시</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">,</span> <span class="nx">Component</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>

  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">number</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span>
    <span class="na">fixedNumber</span><span class="p">:</span><span class="mi">0</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">(){</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">number</span><span class="p">,</span> <span class="nx">fixedNumber</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">number</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">fixedNumber</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>        <span class="p">{</span><span class="cm">/* &lt;button onClick = {() =&gt; {
          this.setState({number: number + 1})
        }}&gt;Click ME!&lt;/button&gt; */</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">prevState</span> <span class="o">=&gt;</span> <span class="p">({</span><span class="na">number</span><span class="p">:</span> <span class="nx">prevState</span><span class="p">.</span><span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}))</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">prevState</span> <span class="o">=&gt;</span> <span class="p">({</span><span class="na">number</span><span class="p">:</span> <span class="nx">prevState</span><span class="p">.</span><span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}))</span>
        <span class="p">}}</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">ME</span><span class="o">!&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Counter</span><span class="p">;</span>
</code></pre></div></div>

<h6 id="callback">callback</h6>
<p>setState를 통해 값을 업데이트 한 후 특정 작업을 시행하고 싶을 때, 두번째 파라미터르 callback 함수를 등록하면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">,</span> <span class="nx">Component</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>

  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">number</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span>
    <span class="na">fixedNumber</span><span class="p">:</span><span class="mi">0</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">(){</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">number</span><span class="p">,</span> <span class="nx">fixedNumber</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">number</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">fixedNumber</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>        <span class="p">{</span><span class="cm">/* &lt;button onClick = {() =&gt; {
          this.setState({number: number + 1})
        }}&gt;Click ME!&lt;/button&gt; */</span><span class="p">}</span>
        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span> <span class="o">=</span> <span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span>
            <span class="nx">prevState</span> <span class="o">=&gt;</span> <span class="p">(</span>
              <span class="p">{</span><span class="na">number</span><span class="p">:</span> <span class="nx">prevState</span><span class="p">.</span><span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span>
              <span class="p">),</span>
              <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">state가 호출되었습니다.</span><span class="dl">'</span><span class="p">);</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span>
              <span class="p">}</span>
            <span class="p">)</span>
        <span class="p">}}</span><span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">ME</span><span class="o">!&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Counter</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="함수-컴포넌트에서의-usestate">함수 컴포넌트에서의 useState</h3>
<p>함수 컴포넌트에서는 useState라는 함수를 불러와  사용한다.</p>
<ul>
  <li>useState 함수의 인자에는 상태의 초깃값을 넣어준다. 반드시 객체일 필요는 없고 숫자, 문자열, 객체, 배열 등등 가능.
```
import React, {useState} from ‘react’;</li>
</ul>

<p>const Say = () =&gt; {
  const [message, setMessage] = useState(‘’);
  const onClickEnter = () =&gt; {
    setMessage(‘hello’);
  }
  const onClickLeave = () =&gt; {
    setMessage(‘bye’)
  }
  const [color, setColor] = useState(‘black’);</p>

<p>return (
    &lt;div&gt;
      &lt;button onClick = {onClickEnter}&gt;입장&lt;/button&gt;
      &lt;button onClick = {onClickLeave}&gt;퇴장&lt;/button&gt;
      &lt;h1 style=&gt;{message}&lt;/h1&gt;
      &lt;button onClick={() =&gt; setColor(‘green’)}&gt;green&lt;/button&gt;
      &lt;button onClick={() =&gt; setColor(‘blue’)}&gt;blue&lt;/button&gt;
    &lt;/div&gt;
  )
}</p>

<p>export default Say;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
###### state를 사용할 때의 주의
* state의 값을 바꿔야 할 때는 setState 혹은 useState를 통해 전달받은 세터 함수를 사용해야 한다.
* 배열이나 객체를 업데이트 해야 할 때 -&gt; 배열이나 객체의 사본을 만들고 그것을 setState 혹은 세터 함수를 통해 업데이트
	* 리액트에서는 state 의 변경을 감지하고, 변경된 부분을 리렌더링을 하는데 setState (또는 useState 의 세터 함수)를 사용하지 않고 직접 state 값을수정할 경우 변경을 감지하지 못하기 때문

**잘못된 예시**
```javascript
// 클래스형 컴포넌트
this.state.number = this.state.number + 1;this.state.array = this.array.push(2);this.state.object.value = 5;
// 함수형 컴포넌트
const [object, setObject] = useState({a: 1, b: 1});object.b = 2;
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 사본을 만들어서 업데이트하는 예시</span>

<span class="c1">// 객체 다루기</span>
<span class="kd">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">};</span>
<span class="kd">const</span> <span class="nx">nextObject</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">object</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">};</span>
<span class="c1">// 사본을 만들어서 b 값만 덮어 쓰기</span>

<span class="c1">// 배열 다루기</span>
<span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span>
	<span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
	<span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
	<span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="kc">false</span><span class="p">}</span>
<span class="p">];</span>
<span class="kd">let</span> <span class="nx">nextArray</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">concat</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="mi">4</span> <span class="p">});</span> <span class="c1">// 새 항목 추가</span>
<span class="nx">nextArray</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// id가 2인 항목 제거</span>
<span class="nx">nextArray</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="mi">1</span> <span class="p">?</span> <span class="p">{</span> <span class="p">...</span><span class="nx">item</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span> <span class="p">:</span> <span class="nx">item</span><span class="p">));</span> <span class="c1">// id가 1인 항목의 value를 false로 설정</span>

<span class="p">{</span><span class="cm">/*
	객체에 대한 사본을 만들 때는 spread 연산자라 불리는 ...을 사용하여 처리하고,
	배열에 대한 사본을 만들 때는 배열의 내장 함수들을 활용합니다.
*}
</span></code></pre></div></div>
:ET